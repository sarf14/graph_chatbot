This project is a conversational chatbot that enables users to generate data insights in the form of charts and graphs, mimicking a dashboard experience. The bot supports natural language input and leverages:
‚Ä¢	Llama models (via Groq)
‚Ä¢	PandasAI for data-aware chart generation
‚Ä¢	Streamlit (or Flask) as the interface (TBD after full file inspection)

üîπ Key Features
‚Ä¢	Accepts natural language queries
‚Ä¢	Converts queries into data visualizations
‚Ä¢	Offers multiple chart suggestions
‚Ä¢	Supports different Excel schemas
‚Ä¢	Fast response generation via Groq-hosted LLMs

üîπ Tech Stack
Component	    Description
LLM	            LLaMA models via Groq
Charts	        PandasAI, Matplotlib, Seaborn 
Data Input	    CSV/Excel-based
Backend	Python  Streamlit
NLP Layer	    Custom nlp_response.py + LLM

üîπ Folder Structure
app.py               # App entry point
config.py            # API keys and config
db_utils.py          # Utility to read/store data
excel2.py            # Excel processing logic
excelll.py           # Excel interface variant
excel_3.py           # Another Excel logic variant
nlp_response.py      # Handles user queries and chart types
new_schema_2.csv     # Sample input data
llm_groq             # Groq integration and prompt logic

üîπ Setup Instructions
1.	Clone the Repository / Extract the ZIP
                     unzip new_prototype.zip
                     cd new_prototype
2.	Install dependencies
                      pip install -r requirements.txt
3.	Use config.py for API keys
                      GROQ_API_KEY=your_key
                      PANDASAI_API_KEY=your_key
4.	Run the App
                       Streamlit run app.py

üîπ File Responsibilities
File	                              Description
app.py	                              Central app logic, routes, execution of chatbot response
config.py	                          Stores keys and configuration values
db_utils.py	                          Reads and formats Excel/CSV input
nlp_response.py	                      Contains logic to match prompt to graph/chart type
excel2.py, excel_3.py, excelll.py	  Variants for parsing and formatting Excel datasets

üîπ How it Works
1.	User Input ‚Üí User types a query like ‚ÄúShow sales by category over time.‚Äù
2.	LLM Prompting ‚Üí The prompt is passed to LLaMA via Groq.
3.	NLP Logic ‚Üí nlp_response.py identifies keywords like "bar", "stacked", "line".
4.	Excel Processing ‚Üí One of the excelX.py files loads and parses the dataset.
5.	Graph Generation ‚Üí PandasAI creates a visual representation based on LLM + data context.

üîπ Example Usage
User Prompt:
"Give me a 100% stacked bar chart of transactions over the month."
Generated Response:
Chart rendered using PandasAI showing % of 'Transaction Success', 'Timeout', etc., grouped by day.

File-by-File Explanation
1. app.py
‚Ä¢	Role: Orchestrator of the application.
‚Ä¢	What it does: Acts as the main entry point. It reads user queries, triggers appropriate logic (data loading, NLP, LLM call), and returns a chart.
‚Ä¢	Flow:
o	User query ‚Üí NLP ‚Üí Data Load ‚Üí Chart Generator ‚Üí Return plot

2. config.py
‚Ä¢	Role: Stores all configuration variables such as:
o	API keys (e.g., Groq)
o	File paths
o	Environment variables
Keeping this file separate ensures better security and maintainability.

3. nlp_response.py
‚Ä¢	Role: Analyzes the user's query to determine the chart type or logic needed.
‚Ä¢	How: It searches for keywords (like ‚Äúbar chart‚Äù, ‚Äúline graph‚Äù, ‚Äústacked‚Äù) to decide the direction of processing.
‚Ä¢	Output: A clear instruction about the desired visualization.

4. db_utils.py
‚Ä¢	Role: Responsible for loading data from the source files (CSV, Excel).
‚Ä¢	Functions:
o	Reads files
o	Converts them into structured Pandas DataFrames
o	Makes data ready for chart generation

5. excel2.py, excel_3.py, excelll.py
‚Ä¢	Role: Handle preprocessing of Excel files with slightly different structures.
‚Ä¢	Functionality:
o	Standardize column names
o	Handle date/time formatting issues
o	Remove inconsistencies or junk values
‚Ä¢	Why multiple files? Each corresponds to a different dataset format/schema used in the application.

6. query_generator.py
‚Ä¢	Role: Handles interaction with the Groq LLaMA API.
‚Ä¢	What it does:
o	Sends the user's question as a prompt
o	Receives back code or chart logic
o	This result is sent to PandasAI for execution

7. schema_utils.py
‚Ä¢	Role: Helps in validating or loading structured CSV schema.
‚Ä¢	Functionality: Ensures that the CSV being processed fits the required column names and format.

8. visualization.py
‚Ä¢	Role: Contains the actual plotting logic.
‚Ä¢	Key Functions:
o	plot_100_percent_stacked_bar_chart(data): Generates a 100% stacked bar chart, breaking down each category by its percentage on a given date
o	generate_dashboard(...): Automatically chooses chart types and creates plots using the PandasAI engine
This is the file where visualizations are assembled before being displayed to the user.

9. new_schema_2.csv
‚Ä¢	Role: A sample dataset used to test the application.
‚Ä¢	Structure: Contains typical business KPIs or transactional data like status, dates, and categories.



